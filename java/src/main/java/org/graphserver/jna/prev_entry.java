package org.graphserver.jna;
import com.ochafik.lang.jnaerator.runtime.Structure;
import com.sun.jna.NativeLong;
import com.sun.jna.Pointer;
/**
 * for shortest path trees<br>
 * <i>native declaration : /Users/kolohe/dev/graphserver/core/graph.h:13</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.free.fr/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class prev_entry extends Structure<prev_entry, prev_entry.ByValue, prev_entry.ByReference > {
	/// C type : char*
	public Pointer from;
	/// C type : char*
	public Pointer to;
	/// C type : char*
	public Pointer desc;
	/**
	 * @see edgepayload_t<br>
	 * C type : edgepayload_t
	 */
	public int type;
	/// DEBUG; not really necessary for anything else
	public NativeLong delta_weight;
	public NativeLong weight;
	public NativeLong end_time;
	public prev_entry() {
		super();
	}
	/**
	 * @param from C type : char*<br>
	 * @param to C type : char*<br>
	 * @param desc C type : char*<br>
	 * @param type @see edgepayload_t<br>
	 * C type : edgepayload_t<br>
	 * @param delta_weight DEBUG; not really necessary for anything else
	 */
	public prev_entry(Pointer from, Pointer to, Pointer desc, int type, NativeLong delta_weight, NativeLong weight, NativeLong end_time) {
		super();
		this.from = from;
		this.to = to;
		this.desc = desc;
		this.type = type;
		this.delta_weight = delta_weight;
		this.weight = weight;
		this.end_time = end_time;
	}
	protected ByReference newByReference() { return new ByReference(); }
	protected ByValue newByValue() { return new ByValue(); }
	protected prev_entry newInstance() { return new prev_entry(); }
	public static prev_entry[] newArray(int arrayLength) {
		return Structure.newArray(prev_entry.class, arrayLength);
	}
	public static class ByReference extends prev_entry implements Structure.ByReference {
		
	};
	public static class ByValue extends prev_entry implements Structure.ByValue {
		
	};
}
